<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1501" name="thymio-II">#Evitement d obstacles pour pastille miroir
# ET LIGNE


####################################
# VERSION AVEC UN TIMER AU DEBUT
####################################


####################################
# CODE COULEUR
#
# Orange = dans son timer de dÃ©part (5 sec.)
# Blanc = il voit une ligne NOIRE ou le vide, il recule
# Bleu = il tourne a droite
# Rouge = il tourne a gauche
# Violet = il recule
# Jaune = il avance




var SPEED = 500
var res = 0

#Durations (1000 = 1 sec)
var START_TIMER_DURATION = 5000
var BACKWARD_DURATION = 500
var TURN_DURATION = 1500
var COME_BACK_DURATION = 2000

#Speeds
var TURN_SPEED = 500
var TURN_SPEED_2 = 0

#States /!\ ne pas modifier !
var state = 0

var COME_BACK = 6
var RIGHT = 1
var LEFT = 2

var CONTINUE = 4
var START = 5
var turnDirection = 0

var LINE_VALUE = 200
#cleanup
call sound.system(-1)
timer.period[1] = 0

timer.period[0] = START_TIMER_DURATION
call leds.top(32,16,0)
state = START
onevent timer0
	if state == START then
		state = 0
		callsub forward
	end
	if state == RIGHT then
    	call leds.top(0,0,32)
    	motor.left.target = TURN_SPEED
    	motor.right.target = TURN_SPEED_2
    	callsub turn
		
	elseif state == LEFT then
		call leds.top(32,0,0)
    	motor.left.target = TURN_SPEED_2
    	motor.right.target = TURN_SPEED
    	callsub turn
    	
    elseif state == CONTINUE then
    	callsub forward
    
    elseif state == COME_BACK then
    	motor.left.target = -SPEED
    	motor.right.target = -SPEED
    	timer.period[0] = COME_BACK_DURATION
    	state = turnDirection
		#Reset the turn direction
       	turnDirection = 0
	end

# 10 times per second
onevent prox
	if state != START then
		callsub checkSensor
	end
	

sub checkSensor
	if prox.horizontal[0] > 0 then
		callsub stop
		callsub reculerEtTourner
	
	
	elseif prox.horizontal[1] > 0 then
		callsub stop
		callsub reculerEtTourner
	
	
	elseif prox.horizontal[2] > 0 then
		callsub stop
		callsub reculerEtTourner
	
	elseif prox.horizontal[3] > 0 then
		callsub stop
		callsub reculerEtTourner
		
	elseif prox.horizontal[4] > 0 then
		callsub stop
		callsub reculerEtTourner
	
	elseif prox.ground.reflected[0] &lt; LINE_VALUE or prox.ground.reflected[1] &lt; LINE_VALUE then
		motor.left.target = -SPEED
		motor.right.target = -SPEED
		timer.period[0] = BACKWARD_DURATION
		turnDirection = RIGHT
		state = COME_BACK
		call leds.top(32,32,32)
	end

sub stop
	motor.left.target = 0
	motor.right.target = 0

sub reculerEtTourner
	res = prox.horizontal[0]+prox.horizontal[1]-prox.horizontal[3]-prox.horizontal[4]
	
	if res &lt; 0 then
		turnDirection = LEFT
		call leds.top(32,0,32)
		motor.left.target = -TURN_SPEED_2
		motor.right.target = -TURN_SPEED
		timer.period[0] = BACKWARD_DURATION
	else
		turnDirection = RIGHT
		call leds.top(32,0,32)
		motor.left.target = -TURN_SPEED
		motor.right.target = -TURN_SPEED_2
		timer.period[0] = BACKWARD_DURATION
	end
	
	state = COME_BACK

sub forward
	call leds.top(32,32,0)
	motor.left.target = SPEED
	motor.right.target = SPEED

sub turn
	state = CONTINUE
	timer.period[0] = TURN_DURATION
	</node>


</network>
